//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game/Gameplay/Player/Control/GameplayInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Gameplay.Player.Control
{
    public partial class @GameplayInputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameplayInputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayInputControls"",
    ""maps"": [
        {
            ""name"": ""Mobility"",
            ""id"": ""4d3cd944-c388-4bc5-8fdc-a78f3fb8704d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a6b4608f-e9d4-4ac2-8b7d-6170ced8a296"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""6c48ca9e-5233-49e5-a3a1-b705a9fc1c17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""80a4186e-a1f6-4b66-9b5b-cba3a22cf53e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe7f7047-7c9a-47c1-9e22-5aa7228e77e1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9615e67f-e012-4ee7-81f6-1373998cb148"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5656963b-67ac-4deb-950e-096dd5b860f7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75fa1b14-18e1-4330-8283-3d11e84f1954"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6893132c-44b9-4267-a0b1-8d20cbd6c1ec"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0ad76cf1-02a1-4339-9c98-e3f3fba08dc4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d64a63b7-29e8-4e7b-b62d-47a606a2d5e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""788bb98a-c5f1-41e5-8da8-8789ddddb96b"",
            ""actions"": [
                {
                    ""name"": ""MainAction"",
                    ""type"": ""Button"",
                    ""id"": ""afc64b3d-54b9-4e99-80f7-ed57abd96fa9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""7a209e03-cd0d-4049-bbb1-2e8521aca286"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""52f912d3-f677-48ff-8773-c20a4d6ddb3a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3927fb73-9a1b-446f-9377-218a3157e802"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b5ef1f5-6632-4548-b6ba-68eb0601527a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2850ca0-e1c6-425b-aba8-0e9f7426d44f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Mobility
            m_Mobility = asset.FindActionMap("Mobility", throwIfNotFound: true);
            m_Mobility_Move = m_Mobility.FindAction("Move", throwIfNotFound: true);
            m_Mobility_LookAround = m_Mobility.FindAction("LookAround", throwIfNotFound: true);
            m_Mobility_Jump = m_Mobility.FindAction("Jump", throwIfNotFound: true);
            // Interaction
            m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
            m_Interaction_MainAction = m_Interaction.FindAction("MainAction", throwIfNotFound: true);
            m_Interaction_SecondaryAction = m_Interaction.FindAction("SecondaryAction", throwIfNotFound: true);
            m_Interaction_Interact = m_Interaction.FindAction("Interact", throwIfNotFound: true);
        }

        ~@GameplayInputControls()
        {
            UnityEngine.Debug.Assert(!m_Mobility.enabled, "This will cause a leak and performance issues, GameplayInputControls.Mobility.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Interaction.enabled, "This will cause a leak and performance issues, GameplayInputControls.Interaction.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Mobility
        private readonly InputActionMap m_Mobility;
        private List<IMobilityActions> m_MobilityActionsCallbackInterfaces = new List<IMobilityActions>();
        private readonly InputAction m_Mobility_Move;
        private readonly InputAction m_Mobility_LookAround;
        private readonly InputAction m_Mobility_Jump;
        public struct MobilityActions
        {
            private @GameplayInputControls m_Wrapper;
            public MobilityActions(@GameplayInputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Mobility_Move;
            public InputAction @LookAround => m_Wrapper.m_Mobility_LookAround;
            public InputAction @Jump => m_Wrapper.m_Mobility_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Mobility; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MobilityActions set) { return set.Get(); }
            public void AddCallbacks(IMobilityActions instance)
            {
                if (instance == null || m_Wrapper.m_MobilityActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MobilityActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @LookAround.started += instance.OnLookAround;
                @LookAround.performed += instance.OnLookAround;
                @LookAround.canceled += instance.OnLookAround;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IMobilityActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @LookAround.started -= instance.OnLookAround;
                @LookAround.performed -= instance.OnLookAround;
                @LookAround.canceled -= instance.OnLookAround;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IMobilityActions instance)
            {
                if (m_Wrapper.m_MobilityActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMobilityActions instance)
            {
                foreach (var item in m_Wrapper.m_MobilityActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MobilityActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MobilityActions @Mobility => new MobilityActions(this);

        // Interaction
        private readonly InputActionMap m_Interaction;
        private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
        private readonly InputAction m_Interaction_MainAction;
        private readonly InputAction m_Interaction_SecondaryAction;
        private readonly InputAction m_Interaction_Interact;
        public struct InteractionActions
        {
            private @GameplayInputControls m_Wrapper;
            public InteractionActions(@GameplayInputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MainAction => m_Wrapper.m_Interaction_MainAction;
            public InputAction @SecondaryAction => m_Wrapper.m_Interaction_SecondaryAction;
            public InputAction @Interact => m_Wrapper.m_Interaction_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Interaction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
            public void AddCallbacks(IInteractionActions instance)
            {
                if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
                @MainAction.started += instance.OnMainAction;
                @MainAction.performed += instance.OnMainAction;
                @MainAction.canceled += instance.OnMainAction;
                @SecondaryAction.started += instance.OnSecondaryAction;
                @SecondaryAction.performed += instance.OnSecondaryAction;
                @SecondaryAction.canceled += instance.OnSecondaryAction;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }

            private void UnregisterCallbacks(IInteractionActions instance)
            {
                @MainAction.started -= instance.OnMainAction;
                @MainAction.performed -= instance.OnMainAction;
                @MainAction.canceled -= instance.OnMainAction;
                @SecondaryAction.started -= instance.OnSecondaryAction;
                @SecondaryAction.performed -= instance.OnSecondaryAction;
                @SecondaryAction.canceled -= instance.OnSecondaryAction;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
            }

            public void RemoveCallbacks(IInteractionActions instance)
            {
                if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInteractionActions instance)
            {
                foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InteractionActions @Interaction => new InteractionActions(this);
        public interface IMobilityActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLookAround(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IInteractionActions
        {
            void OnMainAction(InputAction.CallbackContext context);
            void OnSecondaryAction(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
